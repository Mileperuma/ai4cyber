# File: d02_explore_malware.py
# Purpose: give the malware dataset a first deep look — how balanced the labels are,
# what the numeric features look like, and how they relate to each other.
# This is less about building models and more about understanding the "shape"
# of the problem before we dive in.

import pandas as pd

def main():
    # --- load the cleaned malware dataset ---
    df = pd.read_csv("data/interim/malware_clean.csv")

    # overall shape: rows = samples, columns = features + label
    print(f"Dataset shape: {df.shape}")
    print(df.head())  # quick snapshot of what the data looks like

    # --- label distribution ---
    # knowing how many 'malware' vs 'benign' entries we have is crucial.
    # if benign dominates, a naive model could just predict benign every time.
    print("\nLabel distribution:")
    print(df["label"].value_counts())

    # --- summary of numeric columns ---
    # most malware datasets have numerical features (like file size, entropy, opcode counts).
    # we only want to describe those here, since strings like hashes aren’t useful for stats.
    numeric_df = df.select_dtypes(include=["number"])

    print("\nDataset stats (numeric only):")
    print(numeric_df.describe().T)  # transpose makes rows easier to read

    # --- correlation matrix ---
    # correlations give us a hint about redundancy.
    # for example, if two features are almost perfectly correlated,
    # one might be unnecessary for the model.
    corr = numeric_df.corr()
    print("\nCorrelation matrix (first 8 rows):")
    print(corr.head(8))

if __name__ == "__main__":
    main()
